@page "/survey/{id:int}"


<div class="container mt-5">
    <div class="card text-center">
        <div class="card-header">
            @SurveyVM.SurveyName
        </div>
        <div class="card-body">

            @if (!isReady)
            {
                <p>Loading...</p>
            }
            else
            {
                <EditForm Model="SurveyVM" OnValidSubmit="SubmitSurvey">
                    <DataAnnotationsValidator />
                    <div class="row justify-content-center">
                        <ValidationSummary />
                    </div>

                    <div class="row justify-content-center">@(SurveyVM.SurveyQuestion)?</div>
                    <div class="row justify-content-center mt-3">



                        <div class="form-group">
                            <div>
                              @foreach (var option in SurveyVM.SurveyOptions)
                                {
                                    <div class="row">
                                        <input class="form-check-input" type="radio"
                                               name="SurveyOption"
                                               value="@option.SurveyOptionId"
                                               checked="@(SurveyVM.SelectedOption == option.SurveyOptionId.ToString())"
                                               @onchange="@(() => UpdateSelectedValue(option.SurveyOptionId.ToString()))" />
                                        <label class="form-check-label">@option.Description</label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="row justify-content-center my-3">
                        <input type="submit" class="btn btn-primary" value="Submit" />
                    </div>

                </EditForm>
            }

        </div>
        <div class="card-footer text-muted">
            Created on  @(SurveyVM == null ?  "" : SurveyVM.CreatedOn.ToShortDateString())
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    [Inject]
    public SurveysDbContext Context { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private SurveyViewModel SurveyVM = new SurveyViewModel();

    private SurveyAccessor.Models.Survey survey;

    private bool isReady = false;

    protected override async Task OnInitializedAsync()
    {
        survey = await Context.Surveys.Where(x => x.SurveyId == Id).Include(x => x.SurveyOptions).FirstOrDefaultAsync();


        SurveyVM = Mapper.SurveyToSurveyViewModel(survey);

        isReady = true;
    }

    private async Task SubmitSurvey()
    {
        var model = SurveyVM;

        SurveyVM.SurveyTaken();
        SurveyVM.TallyVote();

        survey.TotalTimesTaken = SurveyVM.TotalTimesTaken;
        survey.SurveyOptions = SurveyVM.SurveyOptions;
        survey.TotalVotes = SurveyVM.TotalVotes;

        Context.Attach(survey);
        Context.Entry(survey).State = EntityState.Modified;

        await Context.SaveChangesAsync();

        await JSRuntime.InvokeVoidAsync("alert", "Thank you for taking the survey");

        NavigationManager.NavigateTo("/");

    }

    private void UpdateSelectedValue(string selectedOptionId)
    {
        SurveyVM.SelectedOption = selectedOptionId;
    }

}
