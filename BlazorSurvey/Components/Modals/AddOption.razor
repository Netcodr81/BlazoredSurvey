<div>
    <EditForm Model="@optionModel" OnValidSubmit="SaveOption">
        <DataAnnotationsValidator />
        <div class="form-group m-3">
            <label class="bs-form-label">Description</label>
            <InputText class="form-control" @bind-Value="@optionModel.Description" />
            <ValidationMessage For="@(() => optionModel.Description)"/>
        </div>
        <button type="submit" class="btn btn-primary">Add</button>
        <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
    </EditForm>

   
</div>

@code {
    [CascadingParameter]
    BlazoredModalInstance Modal { get; set; }

    [Parameter]
    public int SurveyId { get; set; }

    [Inject]
    private SurveysDbContext Context { get; set; }

    private EditContext editContext { get; set; }

    private OptionViewModel optionModel { get; set; } = new OptionViewModel();
    private SurveyOption model = new SurveyOption();

    protected override void OnInitialized()
    {

        editContext = new EditContext(optionModel);
        optionModel.Fk_SurveyId = SurveyId;
    }

    private async Task SaveOption()
    {
        model.Fk_SurveyId = optionModel.Fk_SurveyId;
        model.Description = optionModel.Description;
        model.ImagePath = optionModel.ImagePath;
        model.TotalVotes = 0;

        try
        {
            Context.SurveyOptions.Add(model);
            await Context.SaveChangesAsync();
        }
        catch (Exception e)
        {

            var ex = e;
        }



        Modal.CloseAsync(ModalResult.Ok<SurveyOption>(model));
    }

    void Cancel() => Modal.CancelAsync();
}